(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[     80450,       1685]
NotebookOptionsPosition[     31396,        794]
NotebookOutlinePosition[     77717,       1648]
CellTagsIndexPosition[     77674,       1645]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "SEIQRModel", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Import", "[", 
   "\"\<https://raw.githubusercontent.com/palaciowagner/SystemModeling/master/\
Projects/Monkeypox/SEIQREpidemiologyModel.m\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Import", "[", 
   "\"\<https://raw.githubusercontent.com/antononcube/SystemModeling/master/\
Projects/Coronavirus-propagation-dynamics/WL/EpidemiologyModelModifications.m\
\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
  "Import", "[", 
   "\"\<https://raw.githubusercontent.com/antononcube/SystemModeling/master/\
WL/SystemDynamicsInteractiveInterfacesFunctions.m\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.875466058208939*^9, 3.8754660582175007`*^9}, 
   3.8754660915826674`*^9, 3.8754665104779387`*^9, {3.8754671387991123`*^9, 
   3.87546715993582*^9}, 3.875467309099029*^9, {3.875468105019074*^9, 
   3.875468106304641*^9}, {3.8754742231485987`*^9, 3.875474223941633*^9}, {
   3.875552526910809*^9, 3.875552534052486*^9}, 3.8755535587610683`*^9, {
   3.875553694520639*^9, 3.875553697902968*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"76940005-d1f5-41a9-8159-d7d36fa4e843"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "modelSEIQR", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelSEIQR", "=", 
   RowBox[{"SEIQRModel", "[", 
    RowBox[{"t", ",", 
     RowBox[{"\"\<InitialConditions\>\"", "->", "True"}], ",", 
     RowBox[{"\"\<RateRules\>\"", "->", "True"}], ",", 
     RowBox[{
     "\"\<TotalPopulationRepresentation\>\"", "->", "\"\<Constant\>\""}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ModelGridTableForm", "[", "modelSEIQR", "]"}]}], "Input",
 CellChangeTimes->{{3.8754667257694407`*^9, 3.8754667257879343`*^9}, {
   3.875468133035185*^9, 3.87546813392487*^9}, {3.875468164816783*^9, 
   3.875468165811124*^9}, 3.87547130290077*^9, 3.875471450853736*^9, {
   3.8754730681129837`*^9, 3.87547308533773*^9}, {3.875474098974123*^9, 
   3.875474101619596*^9}, {3.8755524956112547`*^9, 3.87555249943118*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"8f761ef0-665d-41e8-8ea5-e59b71d45071"],

Cell[CellGroupData[{

Cell["Getting Data", "Subsection",
 CellChangeTimes->{{3.875543714990284*^9, 
  3.875543716623382*^9}},ExpressionUUID->"4ff84f02-6056-4818-b65b-\
8938481696ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"cievsPEData", " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://raw.githubusercontent.com/palaciowagner/SystemModeling/\
master/Projects/Monkeypox/data/Pernambuco/Monkeypox%20-%20Pernambuco.csv\>\"",
      ",", " ", "\"\<Dataset\>\"", ",", " ", 
     RowBox[{"\"\<HeaderLines\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cievsRECData", " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<https://raw.githubusercontent.com/palaciowagner/SystemModeling/\
master/Projects/Monkeypox/data/Recife/Monkeypox%20-%20Recife.csv\>\"", ",", 
     " ", "\"\<Dataset\>\"", ",", " ", 
     RowBox[{"\"\<HeaderLines\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dateFormat", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Day\>\"", ",", " ", "\"\</\>\"", ",", " ", "\"\<Month\>\"", ",", 
     " ", "\"\</\>\"", ",", " ", "\"\<Year\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PEdataMap", " ", "=", 
   RowBox[{"cievsPEData", " ", "//", " ", "Normal"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RECdataMap", " ", "=", " ", 
   RowBox[{"cievsRECData", " ", "//", " ", "Normal"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pernambucoPopulation", " ", "=", "  ", 
   RowBox[{"QuantityMagnitude", "[", 
    RowBox[{"EntityValue", "[", 
     RowBox[{
      TemplateBox[{"\"Pernambuco, Brazil\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"AdministrativeDivision\"", ",", 
            RowBox[{"{", 
              RowBox[{"\"Pernambuco\"", ",", "\"Brazil\""}], "}"}]}], "]"}], 
        "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Pernambuco\\\", \
\\\"Brazil\\\"}]\"", "\"administrative division\""},
       "Entity"], ",", "\"\<Population\>\""}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"recifePopulation", " ", "=", "  ", 
    RowBox[{"QuantityMagnitude", "[", 
     RowBox[{"EntityValue", "[", 
      RowBox[{
       TemplateBox[{"\"Recife\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"City\"", ",", 
             RowBox[{"{", 
               
               RowBox[{
                "\"Recife\"", ",", "\"Pernambuco\"", ",", "\"Brazil\""}], 
               "}"}]}], "]"}], 
         "\"Entity[\\\"City\\\", {\\\"Recife\\\", \\\"Pernambuco\\\", \
\\\"Brazil\\\"}]\"", "\"city\""},
        "Entity"], ",", "\"\<Population\>\""}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", "cievsPEData", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "Smooth", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Smooth", "[", "data_", "]"}], " ", ":=", " ", 
   RowBox[{"MovingMap", "[", 
    RowBox[{"Median", ",", " ", "data", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"7", ",", "\"\<Day\>\""}], "}"}], ",", "Left", ",", 
       "\"\<Week\>\""}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalConfirmadosPE", " ", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Confirmados\""}], "}"}], "&"}], ",", "PEdataMap"}], "]"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalConfirmadosREC", " ", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Confirmados\""}], "}"}], "&"}], ",", "RECdataMap"}], "]"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DateListLogPlot", "[", 
   RowBox[{
    RowBox[{"Tooltip", "[", 
     RowBox[{"{", 
      RowBox[{"totalConfirmadosPE", ",", " ", "totalConfirmadosREC"}], "}"}], 
     " ", "]"}], ",", " ", 
    RowBox[{"Joined", "\[Rule]", "True"}], ",", " ", 
    RowBox[{"PlotLegends", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Pernambuco\>\"", ",", " ", "\"\<Recife\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"PlotMarkers", "->", "Automatic"}], ",", " ", 
    RowBox[{"GridLines", " ", "->", " ", "Automatic"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalProvaveisPE", " ", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Prov\[AAcute]veis\""}], "}"}], "&"}], ",", "PEdataMap"}], 
       "]"}], "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalProvaveisREC", " ", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Prov\[AAcute]veis\""}], "}"}], "&"}], ",", "RECdataMap"}], 
       "]"}], "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DateListLogPlot", "[", 
   RowBox[{
    RowBox[{"Tooltip", "[", 
     RowBox[{"{", 
      RowBox[{"totalProvaveisPE", ",", " ", "totalProvaveisREC"}], "}"}], " ",
      "]"}], ",", " ", 
    RowBox[{"Joined", "\[Rule]", "True"}], ",", " ", 
    RowBox[{"PlotLegends", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Pernambuco\>\"", ",", " ", "\"\<Recife\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"PlotMarkers", "->", "Automatic"}], ",", " ", 
    RowBox[{"GridLines", " ", "->", " ", "Automatic"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalSuspeitosPE", " ", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Suspeitos\""}], "}"}], "&"}], ",", "PEdataMap"}], "]"}], "]"}],
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalSuspeitosREC", " ", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Suspeitos\""}], "}"}], "&"}], ",", "RECdataMap"}], "]"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DateListLogPlot", "[", 
   RowBox[{
    RowBox[{"Tooltip", "[", 
     RowBox[{"{", 
      RowBox[{"totalSuspeitosPE", ",", " ", "totalSuspeitosREC"}], "}"}], " ",
      "]"}], ",", " ", 
    RowBox[{"Joined", "\[Rule]", "True"}], ",", " ", 
    RowBox[{"PlotLegends", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Pernambuco\>\"", ",", " ", "\"\<Recife\>\""}], "}"}]}], 
    ",", " ", 
    RowBox[{"PlotMarkers", "->", "Automatic"}], ",", " ", 
    RowBox[{"GridLines", " ", "->", " ", "Automatic"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalNotificadosPE", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Notificados\""}], "}"}], "&"}], ",", "PEdataMap"}], "]"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalNotificadosREC", "=", " ", 
   RowBox[{"Ceiling", "[", 
    RowBox[{"Smooth", "[", 
     RowBox[{"TimeSeries", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"FromDateString", "[", 
            RowBox[{"#Inicio", ",", " ", "dateFormat"}], "]"}], ",", " ", 
           "#\"Notificados\""}], "}"}], "&"}], ",", "RECdataMap"}], "]"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DateListLogPlot", "[", 
  RowBox[{
   RowBox[{"Tooltip", "[", 
    RowBox[{"{", 
     RowBox[{"totalSuspeitosPE", ",", " ", "totalSuspeitosREC"}], "}"}], " ", 
    "]"}], ",", " ", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Pernambuco\>\"", ",", " ", "\"\<Recife\>\""}], "}"}]}], ",",
    " ", 
   RowBox[{"PlotMarkers", "->", "Automatic"}], ",", " ", 
   RowBox[{"GridLines", " ", "->", " ", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8755437035682497`*^9, 3.8755437054036016`*^9}, {
   3.8755437605358267`*^9, 3.875543794974711*^9}, {3.875543911032358*^9, 
   3.875543990795394*^9}, {3.87554410675138*^9, 3.875544108608344*^9}, {
   3.875544305297677*^9, 3.8755444039982033`*^9}, {3.875544532513013*^9, 
   3.875544544771244*^9}, {3.875544575013637*^9, 3.875544626582634*^9}, {
   3.875544773294361*^9, 3.875544773858775*^9}, {3.875544817791253*^9, 
   3.875544889725027*^9}, {3.8755449245926933`*^9, 3.875544963059091*^9}, {
   3.875545883521722*^9, 3.875545901630278*^9}, {3.8755460033464737`*^9, 
   3.875546044497016*^9}, 3.8755461149595947`*^9, {3.875546149931065*^9, 
   3.8755461672587347`*^9}, {3.875546217928976*^9, 3.8755463932455997`*^9}, {
   3.875546717233149*^9, 3.8755467440147257`*^9}, {3.875547303594733*^9, 
   3.8755473040863647`*^9}, {3.875547362522336*^9, 3.875547410726634*^9}, {
   3.875547441933509*^9, 3.8755474847086563`*^9}, 3.875547543302998*^9, {
   3.87554760873071*^9, 3.875547615405675*^9}, 3.875547669186109*^9, {
   3.8755477245473747`*^9, 3.875547736524952*^9}, {3.875548048633539*^9, 
   3.8755482667761374`*^9}, {3.8755485031098127`*^9, 
   3.8755485172589197`*^9}, {3.875548802743474*^9, 3.8755488056844463`*^9}, {
   3.875548842974025*^9, 3.87554886723942*^9}, 3.875548904078384*^9, {
   3.8755489475136967`*^9, 3.875549000726763*^9}, {3.875549044989504*^9, 
   3.875549045565648*^9}, {3.875549084655916*^9, 3.87554908627389*^9}, {
   3.8755491195474987`*^9, 3.875549218670867*^9}, {3.8755492541454*^9, 
   3.875549276057672*^9}, {3.875549940856248*^9, 3.8755499418384113`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"d3540b5d-8e0a-4344-be14-197e74525025"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dados Literatura", "Section",
 CellChangeTimes->{
  3.8744196198659697`*^9, 3.874419742716351*^9, {3.874420347573366*^9, 
   3.8744203681081867`*^9}, {3.87442216333113*^9, 
   3.874422165096882*^9}},ExpressionUUID->"2cd9223d-7a76-4b5b-bdde-\
f6007fc03415"],

Cell["\<\
Alguns dados que tirei de alguns artigos sobre a din\[AHat]mica da Monkeypox \
que ser\[ATilde]o uteis para as formulas\
\>", "Text",
 CellChangeTimes->{{3.8744221699690866`*^9, 
  3.8744221866846046`*^9}},ExpressionUUID->"c6baa082-b56e-4912-8a62-\
0cc014df29fe"],

Cell[CellGroupData[{

Cell["Per\[IAcute]odo de Incuba\[CCedilla]\[ATilde]o [1]", "Subsection",
 CellChangeTimes->{{3.874420413839994*^9, 3.8744205120133343`*^9}, {
  3.874420653252817*^9, 3.8744206618116827`*^9}, {3.8744207448662024`*^9, 
  3.874420753393812*^9}, {3.874420786982499*^9, 3.8744208475660133`*^9}, {
  3.874421167040275*^9, 
  3.874421167624713*^9}},ExpressionUUID->"e88cb2d3-8579-4333-9d3a-\
d002f3646088"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"incubation", " ", "=", " ", 
   RowBox[{"Range", "[", 
    RowBox[{"5", ",", "21"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"avgIncubation", " ", "=", " ", 
   RowBox[{"Mean", "[", "incubation", "]"}]}], 
  ";"}], "\[IndentingNewLine]", "avgIncubation"}], "Input",
 CellChangeTimes->{{3.874421022159871*^9, 3.8744210648582*^9}, {
   3.874421148828377*^9, 3.874421161266922*^9}, {3.8755512561476173`*^9, 
   3.8755513163206663`*^9}, 3.875555251350094*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"d9dcabe6-bed2-4a5d-a3c5-71af4cbdfa13"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Per\[IAcute]odo de Infec\[CCedilla]\[ATilde]o [1]", "Subsection",
 CellChangeTimes->{{3.874420413839994*^9, 3.8744205120133343`*^9}, {
   3.874420653252817*^9, 3.8744206618116827`*^9}, {3.8744207448662024`*^9, 
   3.874420753393812*^9}, {3.874420795055449*^9, 3.874420796069531*^9}, {
   3.874420864391163*^9, 3.8744209253370047`*^9}, {3.874421375328641*^9, 
   3.874421376857813*^9}, 
   3.874423274562092*^9},ExpressionUUID->"bf36fb52-4330-4acc-a467-\
f8b45beef47f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"prodomalPhase", " ", "=", " ", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rashPhase", " ", "=", " ", 
   RowBox[{"Range", "[", 
    RowBox[{"7", ",", "21"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"avgTotalInfection", " ", "=", " ", 
   RowBox[{"Mean", "[", 
    RowBox[{
     RowBox[{"Map", "[", "Mean", "]"}], " ", "@", " ", 
     RowBox[{"{", 
      RowBox[{"prodomalPhase", ",", " ", "rashPhase"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", "avgTotalInfection"}], "Input",
 CellChangeTimes->{{3.874421193476431*^9, 3.874421230218588*^9}, {
   3.87442126177465*^9, 3.874421305387443*^9}, {3.874422207298182*^9, 
   3.874422217193812*^9}, {3.874423193748547*^9, 3.8744232247416687`*^9}, {
   3.8755539348884773`*^9, 3.875553944017954*^9}, 3.87555525438925*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"aa77d3d6-713b-4447-a10c-58e8777cc36b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.874423188399619*^9, 3.874423191223794*^9}, {
  3.874423231291381*^9, 3.8744232324648523`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"fa6b4930-7d0c-4c4d-8f61-04afef70ffb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Taxa de Recupera\[CCedilla]\[ATilde]o (\[Gamma])", "Subsection",
 CellChangeTimes->{{3.874420413839994*^9, 3.8744205120133343`*^9}, {
  3.874420653252817*^9, 3.8744206618116827`*^9}, {3.8744207448662024`*^9, 
  3.874420753393812*^9}, {3.874420795055449*^9, 3.874420796069531*^9}, {
  3.874420864391163*^9, 3.87442086540362*^9}, {3.874422646514326*^9, 
  3.8744226878698807`*^9}},ExpressionUUID->"019561b0-a8a1-4fe1-b99b-\
54d042a4d99e"],

Cell[TextData[{
 "De acordo com [2], ",
 Cell[BoxData[Cell[TextData[Cell[BoxData[
   StyleBox[
    RowBox[{"\[Gamma]", " ", "==", 
     FractionBox["1", "\[Lambda]"]}],
    FontSize->22]], "InlineCode",ExpressionUUID->
   "1d83240e-77c1-4dd8-9f6f-0900794e7631"]], "InlineCode",ExpressionUUID->
   "8c097c10-b51d-4275-8606-06e13c29f6ae"]], "InlineCode",ExpressionUUID->
  "f695a295-5abd-4757-b82d-dde1a803b957"],
 ", sendo \[Lambda] a m\[EAcute]dia do per\[IAcute]odo de infec\[CCedilla]\
\[ATilde]o total."
}], "Text",
 CellChangeTimes->{
  3.87442271062945*^9, {3.8744227752180433`*^9, 3.874422825608088*^9}, {
   3.874423172926847*^9, 3.8744231846967573`*^9}, {3.874423240620431*^9, 
   3.8744233635760927`*^9}, 3.8744234282434587`*^9, {3.8755539503848667`*^9, 
   3.87555395689014*^9}},ExpressionUUID->"66f8cbb7-4eb1-4dbe-b158-\
86b1860cebdb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "Section",
 CellChangeTimes->{{3.874420413839994*^9, 3.8744205120133343`*^9}, {
   3.874420653252817*^9, 3.8744206618116827`*^9}, {3.8744207448662024`*^9, 
   3.874420753393812*^9}, {3.874420795055449*^9, 3.874420796069531*^9}, 
   3.874422705367243*^9},ExpressionUUID->"7ad0d5dd-7346-485c-b93a-\
763aaae6523c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"initialInfected", " ", "=", "  ", 
   RowBox[{
    RowBox[{
     RowBox[{"Normal", "[", "totalConfirmadosPE", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"initialExposed", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Normal", "[", "totalProvaveisPE", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"initialQuarantine", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Normal", "[", "totalSuspeitosPE", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lsFocusParams", "=", 
    RowBox[{"{", 
     RowBox[{"\[Beta]", ",", " ", "\[Zeta]", ",", " ", "\[Lambda]"}], "}"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelSEIQR", "=", 
   RowBox[{"SetRateRules", "[", 
    RowBox[{"modelSEIQR", ",", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"NP", "[", "0", "]"}], "->", "pernambucoPopulation"}], 
      "|>"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"modelSEIQR", "=", 
    RowBox[{"SetInitialConditions", "[", 
     RowBox[{"modelSEIQR", ",", "\[IndentingNewLine]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{
         RowBox[{"SP", "[", "0", "]"}], "->", 
         RowBox[{"pernambucoPopulation", "-", "initialInfected"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"EP", "[", "0", "]"}], "->", " ", "initialExposed"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"IP", "[", "0", "]"}], "->", " ", "initialInfected"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"QP", "[", "0", "]"}], "->", "initialQuarantine"}]}], 
       "\[IndentingNewLine]", "|>"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Subtrair", " ", "do", " ", "n\[UAcute]mero", " ", "da", " ", "primeira", 
    " ", "semana", " ", "epidemiol\[OAcute]gica"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lsActualEquations", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"modelSEIQR", "[", "\"\<Equations\>\"", "]"}], "//.", 
      RowBox[{"KeyDrop", "[", 
       RowBox[{
        RowBox[{"modelSEIQR", "[", "\"\<RateRules\>\"", "]"}], ",", 
        "lsFocusParams"}], "]"}]}], ",", 
     RowBox[{"modelSEIQR", "[", "\"\<InitialConditions\>\"", "]"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<GridTableForm\>\"", "]"}], "[", 
  RowBox[{"List", "/@", "lsActualEquations"}], "]"}]}], "Input",
 CellChangeTimes->{{3.875473996363887*^9, 3.875474010050695*^9}, {
   3.875474155855949*^9, 3.875474156017202*^9}, {3.875474329001894*^9, 
   3.875474335761436*^9}, {3.875523165212096*^9, 3.8755232227881536`*^9}, {
   3.8755233199164057`*^9, 3.875523383470689*^9}, {3.875523460223352*^9, 
   3.875523461046767*^9}, {3.875523647114324*^9, 3.875523653931793*^9}, {
   3.875523841042659*^9, 3.875523846869163*^9}, 3.87552399948927*^9, {
   3.875524553236609*^9, 3.875524564001429*^9}, 3.875526080184216*^9, {
   3.875543563146864*^9, 3.875543629049678*^9}, {3.875543690469019*^9, 
   3.875543696642214*^9}, {3.8755437636113253`*^9, 3.8755437755395927`*^9}, 
   3.875543850318366*^9, 3.8755462103475647`*^9, {3.875546310588829*^9, 
   3.875546330944354*^9}, {3.8755463979543962`*^9, 3.875546494081819*^9}, {
   3.875546533165267*^9, 3.875546545281949*^9}, {3.875546586875319*^9, 
   3.875546596550853*^9}, {3.8755467051717033`*^9, 3.8755467093225193`*^9}, {
   3.875546833566113*^9, 3.8755468580596323`*^9}, {3.875554010621355*^9, 
   3.875554017309965*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"74e1e794-3307-4fe5-833c-391cef1a0db3"],

Cell[BoxData[
 RowBox[{"aSol", "=", 
  RowBox[{"Association", "@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"ParametricNDSolve", "[", 
     RowBox[{"lsActualEquations", ",", 
      RowBox[{"Head", "/@", 
       RowBox[{"Keys", "[", 
        RowBox[{"modelSEIQR", "[", "\"\<Stocks\>\"", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "30"}], "}"}], ",", "lsFocusParams"}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8754743641799192`*^9, 3.875474364195685*^9}, {
  3.875524537756283*^9, 3.875524538847726*^9}, {3.875525997913603*^9, 
  3.8755259982595663`*^9}, {3.875554050972171*^9, 3.87555405103013*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"23ab8b29-b315-45d5-8b1c-2f080f0a85df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"opts", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PlotRange", "->", "All"}], ",", 
     RowBox[{"PlotLegends", "->", "None"}], ",", 
     RowBox[{"PlotTheme", "->", "\"\<Detailed\>\""}], ",", 
     RowBox[{"PerformanceGoal", "->", "\"\<Speed\>\""}], ",", 
     RowBox[{"ImageSize", "->", "600"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lsPopulationKeys", "=", 
   RowBox[{"GetPopulationSymbols", "[", 
    RowBox[{"modelSEIQR", ",", 
     RowBox[{"__", "~~", "\"\<Population\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", "lsPopulationPlots", "}"}], ",", 
     RowBox[{
      RowBox[{"lsPopulationPlots", "=", 
       RowBox[{"ParametricSolutionsPlots", "[", 
        RowBox[{
         RowBox[{"modelSEIQR", "[", "\"\<Stocks\>\"", "]"}], ",", 
         RowBox[{"KeyTake", "[", 
          RowBox[{"aSol", ",", "lsPopulationKeys"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "contactRate", ",", "incubationPeriod", ",", "infectionPeriod"}], 
          "}"}], ",", "nWeeks", ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<LogPlot\>\"", "->", "popLogPlotQ"}], ",", 
         RowBox[{"\"\<Together\>\"", "->", "popTogetherQ"}], ",", 
         RowBox[{"\"\<Derivatives\>\"", "->", "popDerivativesQ"}], ",", 
         RowBox[{
         "\"\<DerivativePrefix\>\"", "->", "\"\<\[CapitalDelta]\>\""}], ",", 
         "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Multicolumn", "[", 
       RowBox[{"lsPopulationPlots", ",", "nPlotColumns", ",", 
        RowBox[{"Dividers", "->", "All"}], ",", 
        RowBox[{"FrameStyle", "->", 
         RowBox[{"GrayLevel", "[", "0.8", "]"}]}]}], "]"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "contactRate", ",", "6.3", ",", 
       "\"\<Contact rate of the infected population\>\""}], "}"}], ",", "2", 
     ",", "10", ",", "1", ",", 
     RowBox[{"Appearance", "->", 
      RowBox[{"{", "\"\<Open\>\"", "}"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "incubationPeriod", ",", "13", ",", "\"\<Incubation period\>\""}], 
      "}"}], ",", "5", ",", "21", ",", "1", ",", 
     RowBox[{"Appearance", "->", 
      RowBox[{"{", "\"\<Open\>\"", "}"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"infectionPeriod", ",", "8", ",", "\"\<Infection Period\>\""}], 
      "}"}], ",", "0", ",", "21", ",", "1", ",", 
     RowBox[{"Appearance", "->", 
      RowBox[{"{", "\"\<Open\>\"", "}"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nWeeks", ",", "2", ",", "\"\<Epidemiological Week\>\""}], 
      "}"}], ",", "1", ",", "20", ",", "1", ",", 
     RowBox[{"Appearance", "->", 
      RowBox[{"{", "\"\<Open\>\"", "}"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "popTogetherQ", ",", "False", ",", 
       "\"\<Plot populations together\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "popDerivativesQ", ",", "False", ",", 
       "\"\<Plot populations derivatives\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "popLogPlotQ", ",", "False", ",", "\"\<LogPlot populations\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nPlotColumns", ",", "2", ",", "\"\<Number of plot columns\>\""}], 
      "}"}], ",", 
     RowBox[{"Range", "[", "3", "]"}]}], "}"}], ",", 
   RowBox[{"ControlPlacement", "->", "Left"}], ",", 
   RowBox[{"ContinuousAction", "->", "False"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.875474377305602*^9, 3.875474377319901*^9}, {
   3.875526004704837*^9, 3.875526011768643*^9}, {3.875549490544979*^9, 
   3.875549517205114*^9}, {3.87555410887018*^9, 3.875554169423731*^9}, {
   3.875554210817957*^9, 3.8755542229741*^9}, {3.875554269729175*^9, 
   3.875554312189763*^9}, {3.875554466901341*^9, 3.87555447745945*^9}, 
   3.875555471548354*^9, {3.875558783676908*^9, 3.8755588293136253`*^9}, {
   3.875558906307225*^9, 3.875558917413204*^9}, {3.8755591051391163`*^9, 
   3.8755591372986097`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"998c6393-5b8a-41fc-b6e1-0dc26f0fd0d5"],

Cell[BoxData[
 RowBox[{"12", "-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"6", "*", 
          RowBox[{"10", "^", 
           RowBox[{"-", "6"}]}]}], ")"}], "*", "2", "*", 
        RowBox[{"(", 
         RowBox[{"9", "*", 
          RowBox[{"10", "^", "6"}]}], ")"}]}], ")"}], "/", "9"}], "*", 
     RowBox[{"10", "^", "6"}]}], "-", "2"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.875557547313959*^9, 3.875557572009397*^9}, {
  3.8755580124552317`*^9, 3.875558128036282*^9}, {3.875558164546341*^9, 
  3.875558198354765*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"24013289-b8c4-465c-bba1-a43d9d69251d"],

Cell[BoxData[
 RowBox[{"ScientificForm", "[", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"-", "11999986"}], ",", "8"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[66]:=",ExpressionUUID->"c4aff669-99c7-4df9-9b39-789a7110ff94"],

Cell[BoxData[
 RowBox[{"11999998", "-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"2", "/", "26"}], "+", 
    RowBox[{"166", "/", "806"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.87555845246918*^9, 3.875558458480899*^9}, {
  3.875558532186068*^9, 3.87555854122641*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"ba3d18a9-dc70-45fe-a092-b1006ede1b03"],

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["4835999080", "403"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[69]:=",ExpressionUUID->"f0620e9b-cb24-4c49-829b-89d93ddfcffc"],

Cell[BoxData[
 RowBox[{"NumberForm", "[", 
  RowBox[{"1.1999997717121588`*^7", ",", "16"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[70]:=",ExpressionUUID->"769cb495-6a1c-40b8-8421-7e8fd35872bc"],

Cell[BoxData[
 RowBox[{"IntegerPart", "[", "1.1999997717121588`*^7", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[71]:=",ExpressionUUID->"7ef5f72b-0197-44bb-9b54-3cc83f480473"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"6", "*", 
   RowBox[{"10", "^", 
    RowBox[{"-", "6"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8755586541186523`*^9, 3.875558671579895*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"41d7bb09-730d-4aae-a762-0b57a72c2134"],

Cell[BoxData[
 RowBox[{"ContinuedFraction", "[", "6.`*^-6", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[74]:=",ExpressionUUID->"a070ee57-26e5-42ac-bfde-fe6bfa118e21"],

Cell[BoxData["0.000063"], "Input",
 CellChangeTimes->{{3.8755587627416573`*^9, 3.875558763554029*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"00170163-57b5-4347-b98e-5f519be0c79d"],

Cell[BoxData[
 RowBox[{"ScientificForm", "[", "0.000063`", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[76]:=",ExpressionUUID->"65b8f6ee-2d35-4723-97cc-28aa4c78bd75"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.875558707466889*^9, 
  3.875558707481838*^9}},ExpressionUUID->"bb4e3f87-f7c0-4464-a204-\
5442ff663ade"]
}, Open  ]]
},
WindowSize->{1749, 865},
WindowMargins->{{Automatic, 56}, {Automatic, 37}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Mac OS X x86 (64-bit) (June 21, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6ffe0973-fbe9-4c1e-a9e7-f932c58f438e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[561, 20, 1228, 27, 152, "Input",ExpressionUUID->"76940005-d1f5-41a9-8159-d7d36fa4e843"],
Cell[1792, 49, 955, 18, 103, "Input",ExpressionUUID->"8f761ef0-665d-41e8-8ea5-e59b71d45071"],
Cell[CellGroupData[{
Cell[2772, 71, 160, 3, 54, "Subsection",ExpressionUUID->"4ff84f02-6056-4818-b65b-8938481696ec"],
Cell[2935, 76, 11090, 272, 875, "Input",ExpressionUUID->"d3540b5d-8e0a-4344-be14-197e74525025"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14062, 353, 262, 5, 67, "Section",ExpressionUUID->"2cd9223d-7a76-4b5b-bdde-f6007fc03415"],
Cell[14327, 360, 273, 6, 35, "Text",ExpressionUUID->"c6baa082-b56e-4912-8a62-0cc014df29fe"],
Cell[CellGroupData[{
Cell[14625, 370, 399, 6, 54, "Subsection",ExpressionUUID->"e88cb2d3-8579-4333-9d3a-d002f3646088"],
Cell[15027, 378, 590, 12, 103, "Input",ExpressionUUID->"d9dcabe6-bed2-4a5d-a3c5-71af4cbdfa13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15654, 395, 474, 7, 54, "Subsection",ExpressionUUID->"bf36fb52-4330-4acc-a467-f8b45beef47f"],
Cell[16131, 404, 981, 21, 139, "Input",ExpressionUUID->"aa77d3d6-713b-4447-a10c-58e8777cc36b"],
Cell[17115, 427, 222, 3, 30, "Input",ExpressionUUID->"fa6b4930-7d0c-4c4d-8f61-04afef70ffb1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17374, 435, 442, 6, 54, "Subsection",ExpressionUUID->"019561b0-a8a1-4fe1-b99b-54d042a4d99e"],
Cell[17819, 443, 846, 18, 50, "Text",ExpressionUUID->"66f8cbb7-4eb1-4dbe-b158-86b1860cebdb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18714, 467, 320, 5, 67, "Section",ExpressionUUID->"7ad0d5dd-7346-485c-b93a-763aaae6523c"],
Cell[19037, 474, 3924, 91, 377, "Input",ExpressionUUID->"74e1e794-3307-4fe5-833c-391cef1a0db3"],
Cell[22964, 567, 722, 15, 44, "Input",ExpressionUUID->"23ab8b29-b315-45d5-8b1c-2f080f0a85df"],
Cell[23689, 584, 4836, 124, 446, "Input",ExpressionUUID->"998c6393-5b8a-41fc-b6e1-0dc26f0fd0d5"],
Cell[28528, 710, 694, 19, 30, "Input",ExpressionUUID->"24013289-b8c4-465c-bba1-a43d9d69251d"],
Cell[29225, 731, 246, 6, 44, "Input",ExpressionUUID->"c4aff669-99c7-4df9-9b39-789a7110ff94"],
Cell[29474, 739, 350, 8, 30, "Input",ExpressionUUID->"ba3d18a9-dc70-45fe-a092-b1006ede1b03"],
Cell[29827, 749, 186, 4, 61, "Input",ExpressionUUID->"f0620e9b-cb24-4c49-829b-89d93ddfcffc"],
Cell[30016, 755, 208, 4, 46, "Input",ExpressionUUID->"769cb495-6a1c-40b8-8421-7e8fd35872bc"],
Cell[30227, 761, 185, 3, 46, "Input",ExpressionUUID->"7ef5f72b-0197-44bb-9b54-3cc83f480473"],
Cell[30415, 766, 269, 6, 44, "Input",ExpressionUUID->"41d7bb09-730d-4aae-a762-0b57a72c2134"],
Cell[30687, 774, 176, 3, 46, "Input",ExpressionUUID->"a070ee57-26e5-42ac-bfde-fe6bfa118e21"],
Cell[30866, 779, 181, 2, 30, "Input",ExpressionUUID->"00170163-57b5-4347-b98e-5f519be0c79d"],
Cell[31050, 783, 175, 3, 44, "Input",ExpressionUUID->"65b8f6ee-2d35-4723-97cc-28aa4c78bd75"],
Cell[31228, 788, 152, 3, 30, InheritFromParent,ExpressionUUID->"bb4e3f87-f7c0-4464-a204-5442ff663ade"]
}, Open  ]]
}
]
*)

